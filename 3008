local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Rayfield Example Window",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("üèòÔ∏èHome", nil) -- Title, Image
local MainSection = MainTab:CreateSection("‚ÄºÔ∏èAdmins")

local Toggle1 = MainTab:CreateToggle({
   Name = "Toggle Example",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   loadstring(game:HttpGet(('https://raw.githubusercontent.com/idkevenknowburh/source/refs/heads/main/3008-yup'),true))()
   end,
})

local Button1 = MainTab:CreateButton({
   Name = "Disable Fall Damage",
   Callback = function()
   loadstring(game:HttpGet(('https://raw.githubusercontent.com/idkevenknowburh/source/refs/heads/main/3008-assist'),true))()
   end,
})

local Input1 = Tab:CreateInput({
   Name = "Teleport to Player",
   CurrentValue = "",
   PlaceholderText = "Enter player username you want to teleport to here",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
   for i, v in pairs(game:GetService("Players"):GetPlayers()) do
		if string.sub(string.lower(v.Name), 0, #txt) == string.lower(txt) or string.sub(string.lower(v.DisplayName), 0, #txt) == string.lower(txt) and v ~= game:GetService("Players").LocalPlayer then
			repeat
				game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(math.random(1, 2547), 25, math.random(10, 2541))
				task.wait()
			until v.Character:FindFirstChild("HumanoidRootPart")
			game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = v.Character.HumanoidRootPart.CFrame
		end
	end
end)
   end,
})

local Input2 = MainTab:CreateInput({
   Name = "Teleport to Player 2",
   CurrentValue = "",
   PlaceholderText = "THEY MUST HAVE A TOOL OUT WITH A PART IN IT OR ELSE IT WILL NOT WORK",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
   for i, v in pairs(game:GetService("Players"):GetPlayers()) do
		if string.sub(string.lower(v.Name), 0, #txt) == string.lower(txt) or string.sub(string.lower(v.DisplayName), 0, #txt) == string.lower(txt) and v ~= game:GetService("Players").LocalPlayer then
			for _, part in pairs(v.Character:GetDescendants()) do
				if part:IsA("Part") or part:IsA("MeshPart") or part:IsA("BasePart") then
					game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = part.CFrame
				end
			end
		end
	end
end)
   end,
})

local Input3 = MainTab:CreateInput({
   Name = "Teleport to Player 3",
   CurrentValue = "",
   PlaceholderText = "THEY MUST HAVE A TOOL IN BACKPACK WITH A PART IN IT OR ELSE IT WILL NOT WORK",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
   for i, v in pairs(game:GetService("Players"):GetPlayers()) do
		if string.sub(string.lower(v.Name), 0, #txt) == string.lower(txt) or string.sub(string.lower(v.DisplayName), 0, #txt) == string.lower(txt) and v ~= game:GetService("Players").LocalPlayer then
			for _, part in pairs(v:GetDescendants()) do
				if part:IsA("Part") or part:IsA("MeshPart") or part:IsA("BasePart") then
					game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = part.CFrame
				end
			end
		end
	end
end)
   end,
})

local Input4 = MainTab:CreateInput({
   Name = "(OP) Grab Food",
   CurrentValue = "",
   PlaceholderText = "enter amount of food you want to get",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
   local TimesToTeleport = tonumber(txt) --how much food you want to get
	local Radius = 100 --DO NOT CHANGE
	local PS = game:GetService("Players")
	local WS = game:GetService("Workspace")
	local Player = PS.LocalPlayer
	local PlayerGui = Player:WaitForChild("PlayerGui")
	local Character = PS.LocalPlayer.Character or PS.LocalPlayer.CharacterAdded:Wait()
	local Backpack = Player:WaitForChild("Backpack")
	local HumanoidRoot = Character:WaitForChild("HumanoidRootPart")
	local ItemsFolder = WS:WaitForChild("GameObjects").Physical.Items
	local Storage = PlayerGui:WaitForChild("MainGui").Menus.Inventory
	local Pickup  = Character.System.Action
	local OldCFrame = HumanoidRoot.CFrame
	local OldPosition = HumanoidRoot.Position
	function Check(Object)
		if Object.Name == "Crowbar" then
			return false
		end
		if Object:FindFirstChildOfClass("Part") or Object:FindFirstChildOfClass("MeshPart") then
			local Part = Object:FindFirstChildOfClass("Part") or Object:FindFirstChildOfClass("MeshPart")
			local Distance = (OldPosition - Part.Position).magnitude
			if Distance < Radius then
				return false
			end
			return true, Part
		end
		return false
	end
	function InvetoryCheck()
		local StorageAmount = Storage.UpperLine.Storage
		if StorageAmount.Text == "16/16 items" or StorageAmount.Text == "17/16 items" then
			HumanoidRoot.CFrame = OldCFrame
			wait()
			for i, v in pairs(Backpack:GetChildren()) do
				local A_1 = "Inventory_DropAll"
				local A_2 = 
						{
					["Tool"] = v.Name
				}
				Pickup:InvokeServer(A_1, A_2)
			end
			repeat
				task.wait()
			until StorageAmount.Text == "0/16 items"
		end
		return "Done"
	end
	local Amount = 0
	for i, v in pairs(WS:GetDescendants()) do
		if v.Name == "Apple" or v.Name == "Banana" or v.Name == "Bloxy Soda" or v.Name == "Burger" or v.Name == "Cookie" or v.Name == "Dr. Bob Soda" or v.Name == "Hotdog" or v.Name == "Ice Cream" or v.Name == "Lemon" or v.Name == "Lemon Slice" or v.Name == "Medkit" or v.Name == "Pizza" or v.Name == "Water" or v.Name == "2 Litre Dr. Bob" then         --trollll
			if v:FindFirstChild(v.Name) or v:FindFirstChild("Root") then
				local Bool, Part = Check(v)
				if Bool then
					Amount = Amount + 1
					if Amount >= TimesToTeleport then
						HumanoidRoot.CFrame = OldCFrame
						return;
					else
						repeat
							task.wait()
							repeat
								task.wait()
							until InvetoryCheck() == "Done"
							Bool, Part = Check(v)
							if Part ~= nil then
								HumanoidRoot.CFrame = Part.CFrame
								local A_1 = "Store"
								local A_2 = 
										{
									["Model"] = v
								}
								Pickup:InvokeServer(A_1, A_2)
							end
						until Part == nil
					end
				end
			end
		end
	end
end)
   end,
})

Rayfield:LoadConfiguration()
